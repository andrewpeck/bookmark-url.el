* ~bookmark-url.el~

This small provides a useful helper function for taking an alist of description + url and creating a Marginalia annotated completing read function which launches ~browse-url~.

A simple example:

#+begin_src elisp
(setq bookmarks-alist
'(("Google" . "https://google.com")
  ("Yahoo" . "https://yahoo.com")))

(bookmark-url-setup 'find-search-engines
                     :bookmarks-alist 'bookmarks-alist
                     :prompt "Search Engine")
#+end_src

This creates a function which can be executed with ~M-x find-search-engines~

Alternatively bookmarks may be stored in a separate file. e.g. Add the a list into a standalone file, as shown:

#+begin_src elisp
(("Google" . "https://google.com")
 ("Yahoo" . "https://yahoo.com")))
#+end_src

Now the bookmarks would be set up with:

#+begin_src elisp
(bookmark-url-setup 'find-search-engines
                     :bookmarks-file "~/search-engine-alist.el"
                     :prompt "Search Engine")
#+end_src

Saving to a file offers only the advantage (or disadvantage, as you see fit) of creating

This creates a function which can be executed with ~M-x find-search-engines-add-bookmark~ to interactively define a new bookmark and have it automatically saved to the file.

Alternatively, for storage in ~json~ files is supported by simply choosing a ~json~ file as the target ~bookmarks-file~.

#+begin_src elisp
(bookmark-url-setup 'find-search-engines
                     :bookmarks-file "~/search-engine-alist.json"
                     :prompt "Search Engine")
#+end_src

The bookmarks file should be, e.g.:

#+begin_src json
{"Google": "https://google.com"
 "Yahoo": "https://yahoo.com"}
#+end_src

The opening function to be called can also be modified (so that this could be used with non-URL bookmarks. e.g. to use ~eww~ rather than browse-url:

#+begin_src elisp
(bookmark-url-setup 'find-search-engines
                     :bookmarks-file "~/search-engine-alist.json"
                     :prompt "Search Engine"
                     :open-function 'eww)
#+end_src

Or to generalize you could dispatch to XDG-open to work with external opening of arbitrary file types.

#+begin_src  elisp
(defun my-bookmark-handler (link)
  (call-process "xdg-open" nil 0 nil link))

(bookmark-url-setup 'find-search-engines
                     :bookmarks-file "~/search-engine-alist.json"
                     :prompt "Search Engine"
                     :open-function 'my-bookmark-handler)
#+end_src

#+ATTR_ORG: :width 1044px
#+ATTR_HTML: :style max-width:100%;width:1044px
[[file:images/example.png]]

There's not much else to it, but I find it very helpful for categorizing and easily accessing bookmarks (e.g. datasheets, etc).
